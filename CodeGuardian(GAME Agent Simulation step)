In this simulation, we built an agent for Java project code enhancement. When designing an AI agent, we must define: 
    Goals → What the agent should achieve
    Actions → What the agent can do
    Interaction Pattern → How the agent communicates with the environment (user/system)

===================================================================================! Agent’s Design !=================================================================================================================

Goals: 
  Find potential code enhancements in Java projects – Identify areas in the code that can be improved for readability, maintainability, or user-friendliness.
  Ensure changes are small and self-contained – Each enhancement should be independent and not break existing functionality.
  Always ask for user approval before making changes – No changes are applied without your confirmation.
  Maintain existing interfaces – Ensure that enhancements do not alter the public API or expected behavior of existing code.

Actions available: 
  listProjectFiles() → Explore the project and get a list of all available files.
  readProjectFile(filename) → Open and read the content of a specific file.
  askUserApproval(proposal) → Request user confirmation before applying any suggested enhancement.
  editProjectFile(filename, changes) → Apply the approved enhancement to the file.

=================================================================================! Step-by-Step Simulation !===========================================================================================================

=> Step 1 – Explore the Project: 
  -> Agent: 
    -> Action: listProjectFiles() 
    -> Result: ["Main.java", "Utils.java", "TestHelper.java"]
=> Step 2 – Inspect a File: 
  -> Agent: 
    -> Action: readProjectFile("Utils.java") 
    -> Result: 
        public class Utils {
            public static void main(String[] args) {
                try {
                    int result = 10 / 0;   // ❌ This will throw ArithmeticException
                    System.out.println("Result: " + result);
                } catch (Exception e) {
                    // Only prints the raw error
                    System.out.println(e.getMessage());
                }
            }
        }

=> Step 3 – Propose an Enhancement: 
  -> Agent : Agent identifies a potential issue in the code and At the same time, it asks you: "This is the issue. Shall I propose this change?"
    -> Issue "The catch block currently just dumps the raw exception message and stack trace. Beginners may not understand what went wrong. We can make it more user-friendly."

=> Step 4 – Review Proposal:
  -> You review the suggested enhancement. If you agree: "Yes, this is fine. Do the changes and show me."

=> Step 5 – Ask for Approval and Apply Enhancement
  -> Agent calls the askUserApproval tool to confirm you approved the enhancement. Once approval is confirmed, the agent applies the enhancement and returns the updated code for your review.
    -> Updated code with proper message (where the changes was done, what changes was done, why this changes done, how it will be benificial)
        public class Utils {
            public static void main(String[] args) {
                try {
                    int result = 10 / 0;   // ❌ ArithmeticException
                    System.out.println("Result: " + result);
                } catch (Exception e) {
                    // ✅ More user-friendly error message
                    System.out.println("An error occurred while performing the calculation: " + e.getMessage());
                }
            }
        }
=> Step 5 – Confirm Enhancement
  -> You review the enhanced code. If it looks good: "Yes, this is fine." The agent then proceeds to unit testing.
=> Step 5 – Unit Testing
  -> Agent runs unit tests for the enhanced code. It shows results for both positive and negative scenarios. You review the test results and provide approval: "Yes, this is fine."
=> Step 6 - Integration Testing
  -> Agent performs integration testing for the enhanced code with the rest of the system.
  -> Returns the results to you. You review the results and approve: "Yes, this result is fine."
=> Commit and Merge
  -> After your approval of integration testing, the agent commits the enhanced code and merges it into the main branch.

